"use strict";
// Copyright 2016 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExpressHandler = void 0;
const error_message_1 = require("../classes/error-message");
const populate_error_message_1 = require("../populate-error-message");
const express_1 = require("../request-extractors/express");
/**
 * Returns a function that can be used as an express error handling middleware.
 * @function makeExpressHandler
 * @param {AuthClient} client - an inited Auth Client instance
 * @param {NormalizedConfigurationVariables} config  - the environmental
 *  configuration
 * @returns {expressErrorHandler} - a function that can be used as an express
 *  error handling middleware.
 */
function makeExpressHandler(client, config) {
    /**
     * The Express Error Handler function is an interface for the error handler
     * stack into the Express architecture.
     * @function expressErrorHandler
     * @param {Any} err - a error of some type propagated by the express plugin
     *  stack
     * @param {Object} req - an Express request object
     * @param {Object} res - an Express response object
     * @param {Function} next - an Express continuation callback
     * @returns {ErrorMessage} - Returns the ErrorMessage instance
     */
    function expressErrorHandler(err, req, res, next) {
        let ctxService = '';
        let ctxVersion = '';
        if ((config === null || config === void 0 ? void 0 : config.toString()) === '[object Object]') {
            ctxService = config.getServiceContext().service;
            ctxVersion = config.getServiceContext().version;
        }
        const em = new error_message_1.ErrorMessage()
            .consumeRequestInformation((0, express_1.expressRequestInformationExtractor)(req, res))
            .setServiceContext(ctxService, ctxVersion);
        (0, populate_error_message_1.populateErrorMessage)(err, em);
        if ((client === null || client === void 0 ? void 0 : client.toString()) === '[object Object]' &&
            typeof client.sendError === 'function') {
            client.sendError(em);
        }
        if (typeof next === 'function') {
            next(err);
        }
        return em;
    }
    return expressErrorHandler;
}
exports.makeExpressHandler = makeExpressHandler;
//# sourceMappingURL=express.js.map